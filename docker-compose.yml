services:

  api:
    build: 
      context: ./api
      dockerfile: Dockerfile
    deploy:
      mode: replicated
      replicas: 3
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8087/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    environment:
      - PYTHONUNBUFFERED=0
      - PYTHONPATH=/app
    # ports:
      # - "8087:8087"
      # - "127.0.0.1:8087:8087"  # Limite l'accès à localhost
    command: >
      sh -c "export DATABASE_URL=postgresql://`cat /run/secrets/postgres_user`:`cat /run/secrets/postgres_password`@db:5432/clickdb &&
             python sample_api.py"
    depends_on:
      db : 
        condition : service_healthy
    secrets:
      - postgres_password
      - postgres_user
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api-router.rule=Host(`${TRAEFIK_DOMAIN?Variable not set}`) && PathPrefix(`/api`)"
      - "traefik.http.services.api-service.loadbalancer.server.port=8087"

  db:
    image: postgres:16
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    environment:
      - POSTGRES_USER_FILE=/run/secrets/postgres_user
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
      - POSTGRES_DB=clickdb
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    secrets:
      - postgres_password
      - postgres_user

  ui:
    build:
      context: ./web_app
      dockerfile: Dockerfile
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    # ports:
      # - "8501:8501"
      # - "127.0.0.1:8501:8501"  # Limite l'accès à localhost
    depends_on:
      - api
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ui-router.rule=Host(`${TRAEFIK_DOMAIN?Variable not set}`) && PathPrefix(`/`)"
      - "traefik.http.services.ui-service.loadbalancer.server.port=8501"
      - "traefik.http.services.ui-service.loadbalancer.sticky.cookie=true"
      - "traefik.http.services.ui-service.loadbalancer.sticky.cookie.name=web_sticky"
  
  reverse-ports:
    image: traefik:v3.5
    command: 
      - "--api.insecure=true" # Permettre l'accès aux Dashboard de Traefik
      - "--providers.docker"
      - "--providers.docker.exposedByDefault=false"  
        # Désactive l'exposition automatique des conteneur à Traefik
    # labels:
      # HTTP Basic Auth middleware
      # - traefik.http.middlewares.admin-auth.basicauth.users: ${TRAEFIK_USERNAME?Variable not set}:${TRAEFIK_HASHED_PASSWORD?Variable not set}
      # - traefik.http.routers.traefik-dashboard-https.middlewares: admin-auth
    ports:
      - "80:80"
      - "8080:8080" # traefik dashboard
    volumes:
    # important car ça permet à traefik de monitorer les containers docker
      - /var/run/docker.sock:/var/run/docker.sock 

volumes:
  postgres_data:

secrets:
  postgres_password:
    file: ./secrets/postgres_password.txt
  postgres_user:
    file: ./secrets/postgres_user.txt 
