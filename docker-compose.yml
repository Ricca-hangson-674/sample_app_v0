services:

  api:
    build: 
      context: ./api
      dockerfile: Dockerfile
    deploy:
      mode: replicated
      replicas: 1
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8087/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    environment:
      - PYTHONUNBUFFERED=0
      - PYTHONPATH=/app
    command: >
      sh -c "export DATABASE_URL=postgresql://`cat /run/secrets/postgres_user`:`cat /run/secrets/postgres_password`@db:5432/clickdb &&
             python sample_api.py"
    depends_on:
      db : 
        condition : service_healthy
    secrets:
      - postgres_password
      - postgres_user
    labels:
      - "traefik.enable=true"

      # Router HTTP pour redirection
      - "traefik.http.routers.api.entrypoints=web"
      - "traefik.http.routers.api.rule=Host(`${TRAEFIK_DOMAIN?Variable not set}`) && PathPrefix(`/api`)"
      - "traefik.http.routers.api.middlewares=redirect-to-https@docker"

      # Router HTTPS sécurisé
      - "traefik.http.routers.api-secure.entrypoints=websecure"
      - "traefik.http.routers.api-secure.rule=Host(`${TRAEFIK_DOMAIN?Variable not set}`) && Path(`/api`)"
      - "traefik.http.routers.api-secure.tls=true"

      - "traefik.http.routers.api-secure.tls.certresolver=myresolver"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"

      # Configuration du port interne
      - "traefik.http.services.api-service.loadbalancer.server.port=8087"

  db:
    image: postgres:16
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    environment:
      - POSTGRES_USER_FILE=/run/secrets/postgres_user
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
      - POSTGRES_DB=clickdb
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    secrets:
      - postgres_password
      - postgres_user

  ui:
    build:
      context: ./web_app
      dockerfile: Dockerfile
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    depends_on:
      - api
    labels:
      - "traefik.enable=true"

      - "traefik.http.services.ui-service.loadbalancer.sticky.cookie=true"
      - "traefik.http.services.ui-service.loadbalancer.sticky.cookie.name=web_sticky"

      # Router HTTP pour redirection
      - "traefik.http.routers.ui.entrypoints=web"
      - "traefik.http.routers.ui.rule=Host(`${TRAEFIK_DOMAIN?Variable not set}`) && PathPrefix(`/`)"
      - "traefik.http.routers.ui.middlewares=redirect-to-https@docker"

      # Router HTTPS sécurisé
      - "traefik.http.routers.ui-secure.entrypoints=websecure"
      - "traefik.http.routers.ui-secure.rule=Host(`${TRAEFIK_DOMAIN?Variable not set}`) && Path(`/`)"
      - "traefik.http.routers.ui-secure.tls=true"

      - "traefik.http.routers.ui-secure.tls.certresolver=myresolver"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"

      # Configuration du port interne
      - "traefik.http.services.ui-service.loadbalancer.server.port=8501"
  
  reverse-ports:
    image: traefik:v3.5
    command: 
      - "--api.insecure=true" # Permettre l'accès aux Dashboard de Traefik
      - "--providers.docker"
      - "--providers.docker.exposedByDefault=false"  

      # port 80 pour HTTP et 443 pour HTTPS.
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"

      # Stockage certificats
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.email=${EMAIL_ACME?Variable not set}"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"

      # For production, use the Let's Encrypt production server:
      # - --certificatesresolvers.myresolver.acme.caserver=https://acme-v02.api.letsencrypt.org/directory
      # For testing, use the staging server to avoid rate limits:
      # - --certificatesresolvers.myresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory
    labels:
      # Traefik configuration
      - "traefik.enable=true"

      - "traefik.http.services.traefik-dashboard-http.loadbalancer.server.port=8080"

      # Router HTTP pour redirection
      - "traefik.http.routers.traefik-dashboard-http.entrypoints=web"
      - "traefik.http.routers.traefik-dashboard-http.rule=Host(`${TRAEFIK_DOMAIN_DASHBOARD?Variable not set}`)"
      - "traefik.http.routers.traefik-dashboard-http.middlewares=redirect-to-https@docker"

      # Router HTTPS sécurisé
      - "traefik.http.routers.traefik-dashboard-https.entrypoints=websecure"
      - "traefik.http.routers.traefik-dashboard-https.rule=Host(`${TRAEFIK_DOMAIN_DASHBOARD?Variable not set}`)"
      - "traefik.http.routers.traefik-dashboard-https.tls=true"

      - "traefik.http.routers.traefik-dashboard-https.tls.certresolver=myresolver"

      - "traefik.http.routers.traefik-dashboard-https.service=api@internal"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"

      # HTTP Basic Auth middleware
      - "traefik.http.middlewares.admin-auth.basicauth.users=${TRAEFIK_USERNAME?Variable not set}:${TRAEFIK_HASHED_PASSWORD?Variable not set}"
      - "traefik.http.routers.traefik-dashboard-https.middlewares=admin-auth"

    ports:
      - "80:80"
      - "443:443"
    volumes:
    # important car ça permet à traefik de monitorer les containers docker
      - /var/run/docker.sock:/var/run/docker.sock 
      - ./letsencrypt:/letsencrypt

volumes:
  postgres_data:

secrets:
  postgres_password:
    file: ./secrets/postgres_password.txt
  postgres_user:
    file: ./secrets/postgres_user.txt 
